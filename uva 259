#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<vector>
#include<functional>
#include<unordered_map>
using namespace std;


int e,head[105];
string s;
struct Node{
	int x, y, d;
	int nxt;
};
vector<Node>edge;
void add(int x, int y, int d){
	edge.push_back(Node{ x, y, d, head[x] }); head[x] = e++;
	edge.push_back(Node{ y, x, 0, head[y] }); head[y] = e++;
}
int parse(string s){
	int x = s[0] - 'A' + 1, y, m = s[1] - '0';
	int i = 2;
	while (s[i] != ';'){
		if (isdigit(s[i]))
			y = s[i] - '0', add(x, y + 27, 1);
		i++;
	}
	add(0, x, m);
	return m;
}
int dis[105],pre[105],rec[105];
int f(int s, int t){
	int flow = 0;
	while (1){
		memset(dis, 0, sizeof(dis));
		dis[s] = 1e9;
		queue<int>q;
		q.push(s);
		while (!q.empty()){
			int x = q.front(); q.pop();
			for (int i = head[x]; i != -1; i = edge[i].nxt){
				int j = edge[i].y;
				if (!dis[j] && edge[i].d > 0){
					pre[j] = i, rec[j] = i;
					dis[j] = min(dis[i], edge[i].d);
					q.push(j);
				}
			}
			if (dis[t])break;
		}
		if (!dis[t])break;//沒擴充點 結束
		flow += dis[t];
		for (int x = t; x != s; x = pre[x]){
			int r = rec[x];
			edge[r].d -= dis[t];
			edge[r ^ 1].d += dis[t];
		}
	}
	return flow;
}
int main(){
	while (getline(cin, s)){
		edge.clear();
		e = 0;
		memset(head, -1, sizeof(head));
		//// source 源點 0, 'A'-'Z' 1-26, computer0-9 27-36, sink 匯點 37
		for (int i = 0; i < 10; i++)
			add(i + 27, 37, 1);
		int tot = 0;
		tot += parse(s);
		while (getline(cin, s), s[0] != '\n'){
			tot += parse(s);
		}
		int mxflow = f(0, 37);
	}

}
