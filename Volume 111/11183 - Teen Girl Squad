#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<vector>
#include<functional>
#include<unordered_map>
using namespace std;



struct edge{
	int x, y, d;
};
vector<edge>v;
int t, n, m;
int vis[1001];//訪問
int id[1001];//當前到重構的映射
int pre[1001];//前驅點
int w[1001];//入邊
int dmst(int r){
	int ans = 0;
	while (1){
		for (int i = 0; i < n; i++)
			w[i] = 1e9;
		for (int i = 0; i < v.size(); i++){
			int x = v[i].x, y = v[i].y;
			if (v[i].d < w[y] && x != y){
				w[y] = v[i].d;
				pre[y] = x;
			}
		}
		w[r] = 0;
		for (int i = 0; i < n; i++)//有無法到達點無法生成樹
			if (w[i] == 1e9)return -1;
		
		for (int i = 0; i < n; i++)
			vis[i] = id[i] = -1;
		int newid=0;
		
		for (int i = 0; i < n; i++){
			ans += w[i];
			int s = i;
			while (vis[s] != i&&id[s] == -1 && s != r)
				vis[s] = i, s = pre[s];
			if (s != r&&id[s] == -1){
				for (int u = pre[s]; u != s; u = pre[u])
					id[u] = newid;
				id[s] = newid++;
			}
		}
		if (!newid)break;//無環
		for (int i = 0; i < n; i++)
			if (id[i] == -1)id[i] = newid++;
		for (int i = 0; i < v.size(); i++){
			int s = v[i].y;
			v[i].x = id[v[i].x];
			v[i].y = id[v[i].y];
			if (v[i].x != v[i].y)
				v[i].d -= w[s];
		}
		n = newid;
		r = id[r];
	}
	return ans;
}
int main(){
	cin >> t;
	for (int i = 1; i <= t;i++){
		cin >> n >> m;
		int x, y, d;
		v.clear();
		while (m--){
			cin >> x >> y >> d;
			v.push_back(edge{ x, y, d });		
		}
		int ans = dmst(0);
		printf("Case #%d: ", i);
		if (ans < 0)puts("Possums!");
		else
		printf("%d\n", ans);
	}
}
