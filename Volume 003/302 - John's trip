#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<vector>
#include<functional>
#include<unordered_map>
using namespace std;

struct edge{
	int to, label;
	bool operator<(edge a)const{ return label < a.label; }
};
vector<edge>g[2001];
int labv[2001];
deque<int>path;
void dfs(int u){
	for (int i = 0; i < g[u].size();i++)
		if (!labv[g[u][i].label]){
			labv[g[u][i].label] = 1;
			dfs(g[u][i].to);
			path.push_front(g[u][i].label);
		}
}
int main(){
	int x, y, z;
	while (1){
		for (int i = 0; i < 2001; i++)g[i].clear();
		int e = 0, s = 0;
		while (cin >> x >> y,x+y){
			if (!e)
				s = min(x, y);
			cin >> z;
			g[x].push_back(edge{ y, z });
			g[y].push_back(edge{ x, z });
			e++;
		}
		if (!e)break;
		int odd = 1;
		for (int i = 0; i < 2001; i++)
			if (g[i].size() & 1){
				odd = 0;
				break;
			}
		if (!odd){
			puts("Round trip does not exist.\n");
			continue;
		}
		for (int i = 0; i < 2001; i++)
			sort(g[i].begin(), g[i].end()), labv[i] = 0;
		path.clear();
		dfs(s);
		for (int i = 0; i < path.size(); i++)
			printf("%d%c", path[i], i == path.size() - 1 ? '\n' : ' ');
		puts("");
	}
}
