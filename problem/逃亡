#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<cstdlib>
#include<queue>
#include<string>
#include<vector>
using namespace std;


struct edge{
	int to, t;
};

int main(){
	FILE *stream;
	//freopen_s(&stream, "c24600.in.txt", "r", stdin);
	freopen_s(&stream, "c24603.out.txt", "w", stdout);
	srand(0);
	int T;
	cin >> T;
	//T = rand() % 100 + 1;
	//printf("%d\n", T);
	int n, e, t, m;
	while (T--){
		/*puts("");
		srand(T);
		n = rand() % 100 + 1;
		e = rand() % n + 1;
		t = rand() % 100 + 1;
		m = rand() % n + 1;
		printf("%d\n%d\n%d\n%d\n", n, e, t, m);

		vector<edge>g[101];
		vector<edge>::iterator it;

		int v[101][101] = {};

		int count = 0,a,b,c,k=100;
		while (count!=m){
			srand(k++);
			a = rand() % n + 1;
			b = rand() % n + 1;
			c = rand() % t + 1;
			
			if (!v[b][a]){
				printf("%d %d %d\n", a, b, c);
				g[b].push_back(edge{ a, c });
				count++;
			}
			v[b][a] = 1;
			}*/

		cin >> n >> e >> t >> m;
		vector<edge>g[101];
		for (int i = 0; i < m; i++){
			int a, b, c;
			cin >> a >> b >> c;
			g[b].push_back(edge{ a, c });
			//從後找
		}
		int d[101], inq[101] = {};
		for (int i = 0; i <= n; i++)d[i] = 1e9;
		d[e] = 0;
		queue<int>q;
		q.push(e);
		while (!q.empty()){
			int x = q.front(); q.pop();
			for (int i = 0; i < g[x].size(); i++)
				if (d[g[x][i].to] > d[x] + g[x][i].t){
					d[g[x][i].to] = d[x] + g[x][i].t;
					if (!inq[g[x][i].to]){
						inq[g[x][i].to] = 0;
						q.push(g[x][i].to);
					}
				}
		}
		int ans = 0;
		for (int i = 1; i <= n; i++)
			if (d[i] <= t)ans++;
		printf("%d\n", ans);
		if (T)puts("");
	}
	//fclose(stdin);
	fclose(stdout);
}
/*
內容:
有天一個瘋狂的炸彈魔將人質全關在了他的"遊戲室"
一開始讓每個人都獨自關在某間房 一人一間
並安裝好炸彈 只有一間房是安全的 至於是哪間房在計時開始時即會公怖
任意兩間房之間都是可以相連的 但有些房距離很遠 耗時較多
請求出一回合後有幾人可能存活
輸入
輸入一個T 代表這筆測資有幾回合
對於每個測資
前三行輸入 N代表幾間房(1<=N<=100), E代表安全的房間(1<=E<=N),t代表離炸彈爆炸的剩餘時間(1<=T<=100)
第四行輸入M 代表接下來的M行對於房間相連和時間的敘述
每行包含3個數字 a,b(1<=a,b<=N)代表房a到房b相通(但不代表房b可以到房a),c代表通過時間
輸出
兩筆測資間被空白行分開
輸出包含一個數字代表在t時間內逃到E的人數
input
1

4
2
1
3
3 4 1
4 2 1
3 2 1

output 
3



*/
