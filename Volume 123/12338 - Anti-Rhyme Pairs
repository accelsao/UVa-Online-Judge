#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<vector>
#include<functional>
#include<unordered_map>
using namespace std;

const int M = 1e6 + 1;
struct T {
	int n, label, d;
	int m[26];
}nd[M];
int n, q;
string s;
int mp[M], TS;
int in(string s) {
	int r = 0;
	for (int i = 0; i < s.size(); i++) {
		if (!nd[r].m[s[i] - 'a']){
			TS++;
			for (int i = 0; i < 26; i++)nd[TS].m[i] = 0;
			//nd[TS].label = TS;
			nd[TS].d = i + 1;
			nd[r].m[s[i] - 'a'] = TS;
		}
		r = nd[r].m[s[i] - 'a'];
		
	}
	//nd[r].n++;
	return r;
}
vector<pair<int, int>>Q[M];
int v[M], p[M], lca[M];
int find(int x) { return x == p[x] ? x : p[x] = find(p[x]); }
void tarjan(int u) {
	p[u] = u;
	for (int i = 0; i < 26; i++) {
		int v = nd[u].m[i];
		if (!v)continue;
		tarjan(v);
		p[find(v)] = u;
	}
	v[u] = 1;
	for (int i = 0; i < Q[u].size(); i++)
		if (v[Q[u][i].second])
			lca[Q[u][i].first] = find(Q[u][i].second);
}
int main() {
	int t;
	cin >> t;
	for (int i = 1; i <= t;i++) {
		cin >> n;
		for (int i = 1; i <= n; i++) {
			cin >> s;
			int x = in(s);
			mp[i] = x;
		}
		for (int i = 0; i <= TS; i++)
			v[i] = 0, Q[i].clear();
		cin >> q;
		for (int i = 0; i < q; i++) {
			int x, y;
			cin >> x >> y;
			Q[mp[x]].push_back(make_pair(i, mp[y]));
			Q[mp[y]].push_back(make_pair(i, mp[x]));
		}
		tarjan(0);
		printf("Case %d:\n", i);
		for (int i = 0; i < q; i++)
			printf("%d\n", nd[lca[i]].d);
	}
}

