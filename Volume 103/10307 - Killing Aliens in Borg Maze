-------------------------------kruskal
#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<vector>
#include<functional>
#include<unordered_map>
using namespace std;




struct point{
	int x, y;
	int s;
};
int dir[4][2] = { { 0, 1 }, { 1, 0 }, { 0, -1 }, { -1, 0 } };
vector<point>edge;
vector<point>p;
bool cmp(point a,point b){
	return a.s < b.s;
}
string mp[60];
int n, m;
int d[60][60];
int st[105];
int find(int x){
	return x == st[x] ? x : st[x] = find(st[x]);
}
int k(){
	int n = p.size(), m = edge.size();
	sort(edge.begin(), edge.end(), cmp);
	for (int i = 0; i < n; i++)
		st[i] = i;
	int sum = 0;
	for (int i = 0; i < m; i++){
		int x = find(edge[i].x);
		int y = find(edge[i].y);
		if (x != y){
			st[x] = y;
			sum += edge[i].s;
		}
	}
	return sum;
}
void bfs(int s){
	for (int i = 0; i < m; i++)
		for (int j = 0; j < n; j++)
			d[i][j] = 1e9;
	queue<point>q;
	q.push(p[s]);
	d[p[s].x][p[s].y] = 0;
	while (!q.empty()){
		point nxt, now = q.front();
		q.pop();
		for (int k = 0; k < 4; k++){
			nxt.x = now.x + dir[k][0];
			nxt.y = now.y + dir[k][1];
			if (nxt.x < 0 || nxt.x >= m || nxt.y < 0 || nxt.y >= n)continue;
			if (mp[nxt.x][nxt.y] != '#'&&d[nxt.x][nxt.y] > d[now.x][now.y] + 1){
				d[nxt.x][nxt.y] = d[now.x][now.y] + 1;
				q.push(nxt);
			}
		}
	}
}
int main(){
	int t;
	cin >> t;
	while (t--){
		cin >> n >> m; getchar();	
		p.clear(); edge.clear();
		for (int i = 0; i < m; i++){
			getline(cin, mp[i]);
			for (int j = 0; j < n; j++)
				if (mp[i][j] == 'S' || mp[i][j] == 'A')
					p.push_back(point{ i, j, 0 });
		}
		for (int i = 0; i < p.size(); i++){
			bfs(i);
			for (int j = i + 1; j < p.size(); j++)
				edge.push_back(point{ i, j, d[p[j].x][p[j].y] });
		}
		printf("%d\n", k());
	}
}
-----------------------------------------------prim
#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<vector>
#include<functional>
#include<unordered_map>
using namespace std;




struct point{
	int x, y, d;
	bool operator<(const point &a)const{
		return d > a.d;
	}
};
int dir[4][2] = { { 0, 1 }, { 1, 0 }, { 0, -1 }, { -1, 0 } };
string mp[60];
int n, m;
int d[101][101];
int sx,sy;
int bfs(){
	int ans = 0;
	priority_queue<point>pq;
	pq.push(point{ sx, sy, 0 });
	for (int i = 0; i <= n; i++)
		for (int j = 0; j <= m; j++)
			d[i][j] = 1e9;
	d[sx][sy] = 0;
	while (!pq.empty()){
		point a = pq.top(); pq.pop();
		if (mp[a.x][a.y] == 'A'){
			ans += a.d;
			a.d = 0;
			mp[a.x][a.y] = ' ';
		}
		for (int k = 0; k < 4; k++){
			int tx = a.x + dir[k][0];
			int ty = a.y + dir[k][1];
			int td = a.d + 1;
			if (mp[tx][ty] != '#'&&td < d[tx][ty]){
				d[tx][ty] = td;
				pq.push(point{ tx, ty, td });
			}
		}
	}
	return ans;
}
int main(){
	int t;
	cin >> t;
	while (t--){	
		cin >> m >> n; getchar();	
		for (int i = 0; i < n; i++)
			getline(cin, mp[i]);
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				if (mp[i][j] == 'S'){
					sx = i, sy = j;
					break;
				}
		printf("%d\n",bfs());
	}
}
