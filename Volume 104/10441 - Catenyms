#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<vector>
#include<functional>
#include<unordered_map>
using namespace std;

struct edge{
	int to, d, used;
};
vector<edge>g[26];
vector<int>p;
int in[26], out[26], cnt;
string d[1001];
void dfs(int x){
	for (int i = 0; i < g[x].size(); i++){
		if (g[x][i].used)continue;
		g[x][i].used = 1;
		dfs(g[x][i].to);
		p.push_back(g[x][i].d);
		cnt++;
	}
}
int main(){
	int t;
	cin >> t;
	while (t--){
		int n;
		cin >> n;
		p.clear();
		for (int i = 0; i < 26; i++)
			in[i] = out[i] = 0, g[i].clear();
		for (int i = 0; i < n; i++)
			cin >> d[i];
		sort(d, d + n);
		int s = 26;
		for (int i = 0; i < n; i++){
			int len = d[i].size();
			int x = d[i][0] - 'a';
			int y = d[i][len - 1] - 'a';
			out[x]++, in[y]++;
			g[x].push_back(edge{ y, i, 0 });
			s = min(s, min(x, y));
		}
		int a = 0, b = 0, c = 0;
		for (int i = 0; i < 26; i++){
			if (in[i] == out[i] + 1)a++;
			else if (in[i] + 1 == out[i])b++, s = i;
			else if (in[i] != out[i]){
				c++;
				break;
			}
		}
		if (a>1 || b>1 || a+b==1||c){
			puts("***");
			continue;
		}
		cnt = 0;
		dfs(s);
		if (cnt != n)puts("***");
		else{
			for (int i = p.size()-1; i >=0; i--){
				
				cout << d[p[i]];
				if (i)putchar('.');
			}
			puts("");
		}
	}
}
