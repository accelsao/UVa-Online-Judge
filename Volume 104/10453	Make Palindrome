#include<iostream>
#include<algorithm>
#include<map>
#include<string>
#include<cstdio>
#include<queue>
#include<cmath>
#include<stack>
#include<cctype>
#include<sstream>
using namespace std;

string s;
int dp[1001][1001] = { -1 };
int pos[1001][1001] = {};

int find(int i,int j){
	if (i == j)return 1;
	if (i > j)return 0;
	if (dp[i][j] != -1)return dp[i][j];
	if (s[i] == s[j]){
		dp[i][j] = find(i + 1, j - 1) + 2;
		pos[i][j] = 0;
	}
	else if (find(i + 1, j) > find(i, j - 1)){
		dp[i][j] = find(i + 1, j);
		pos[i][j] = 1;
	}
	else{//find(i + 1, j) <= find(i, j - 1)
		dp[i][j] = find(i, j - 1);
		pos[i][j] = 2;
	}
	return dp[i][j];
}

void print(int i, int j){
	if (i > j)return;
	if (i == j)cout << s[i];
	else if (pos[i][j] == 0)
		cout << s[i], print(i + 1, j - 1), cout << s[i];
	else if (pos[i][j] == 1)
		cout << s[i], print(i + 1, j), cout << s[i];
	else
		cout << s[j], print(i, j - 1), cout << s[j];
}
int main(){
	while (cin >> s){
		for (int i = 0; i < s.size(); i++)
			for (int j = 0; j < s.size(); j++)
				dp[i][j] = -1, pos[i][j] = -1;
		cout<<s.size()-find(0, s.size() - 1)<<' ';
		print(0, s.size() - 1);
		cout << endl;
	}
}
