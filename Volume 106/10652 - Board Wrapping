#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<iostream>
#include<string>
#include<sstream>
#include<vector>
#include<functional>
#include<unordered_map>
using namespace std;

const double eps = 1e-10;
const double PI = acos(-1.0);
struct Point {
	double x, y;
	Point(double x = 0.0, double y = 0.0) :x(x), y(y) {}
	void read() { cin >> x >> y; }
}point[3001],convex[3001];
typedef Point Vector;
Vector operator + (Vector A, Vector B) { return Vector(A.x + B.x, A.y + B.y); }
Vector operator - (Vector A, Vector B) { return Vector(A.x - B.x, A.y - B.y); }
Vector operator * (Vector A, double p) { return Vector(A.x*p, A.y*p); }
Vector operator / (Vector A, double p) { return Vector(A.x / p, A.y / p); }
double Cross(Vector A, Vector B) { return A.x*B.y - A.y*B.x; }
Vector Rotate(Vector A, double rad){
	return Vector(A.x*cos(rad) - A.y*sin(rad), A.x*sin(rad) + A.y*cos(rad));
	//旋轉矩陣
}
double changeRad(double angle){
	return angle*PI / 180.0;
	//角度轉弧度
}
int dcmp(double x){
	if (fabs(x)<eps) return 0;
	return 1;
}
bool operator < (const Point &a, const Point &b){
	return a.x<b.x || (a.x == b.x&&a.y<b.y);
}
bool operator == (const Point a, const Point b){
	return dcmp(a.x - b.x) == 0 && dcmp(a.y - b.y) == 0;
}
int ConvecHull(Point* p, int n, Point* ch){
	sort(p, p + n);
	int m = 0;
	//找上下凸包 從相反邊開始找
	for (int i = 0; i<n; i++){
		while (m>1 && Cross(ch[m - 1] - ch[m - 2], p[i] - ch[m - 2]) <= 0) m--;
		ch[m++] = p[i];
	}
	int k = m;
	//終點p[n-1]必包過 所以從n-2開始
	for (int i = n - 2; i >= 0; i--){
		while (m>k&&Cross(ch[m - 1] - ch[m - 2], p[i] - ch[m - 2]) <= 0) m--;
		ch[m++] = p[i];
	}
	return m-1;
}

double PolygonArea(Point* p, int n){
	double area = 0.0;
	for (int i = 1; i<n - 1; i++)
		area += Cross(p[i] - p[0], p[i + 1] - p[0]);
	return area / 2;
}
int t;
int main() {
	cin >> t;
	while (t--) {
		int c = 0, n;
		double s = 0;
		cin >> n;
		for (int i = 0; i < n; i++) {
			Point p; p.read();
			double w, h, angle;
			cin >> w >> h >> angle;
			double ang = -changeRad(angle);//順時針轉 負值
			point[c++] = p + Rotate(Vector{ w / 2, h / 2 }, ang);
			point[c++] = p + Rotate(Vector{ -w / 2, h / 2 }, ang);
			point[c++] = p + Rotate(Vector{ -w / 2, -h / 2 }, ang);
			point[c++] = p + Rotate(Vector{ w / 2, -h / 2 }, ang);
			//邊界四點
			s += w*h;
		}
		int num = ConvecHull(point, c, convex);
		double totArea = PolygonArea(convex, num);
		printf("%.1f %%\n", 100.0*s / totArea);
	}
}
