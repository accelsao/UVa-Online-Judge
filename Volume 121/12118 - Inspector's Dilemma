#include<string>
#include<cstdio>
#include<iostream>
#include<queue>
#include<cmath>
#include<stack>
#include<cctype>
#include<cstring>
#include<sstream>
#include<set>
#include<map>
#include<algorithm>
#include<functional>
#include <regex>
#include<cassert>
#include<deque>
#include<iomanip>
using namespace std;


#define  N 1200
int group[N];
int d[N];//度數
int w[N];//計數
int find(int x){
	return group[x] == x ? x : find(group[x]);
}
int joint(int x, int y){
	x = find(x); y = find(y);
	if (x == y)return 0;
	if (w[x] >= w[y])//w[]計同組人數 把人少改人多的編號
		w[x]++, group[y] = x;
	else
		w[y]++, group[x] = y;
	return 1;
}
int main(){
	ios::sync_with_stdio(false);
	cin.tie(0);
	int T = 1;
	int v, e, t;
	while (cin >> v >> e >> t, v){
		for (int i = 1; i <= v; i++)
			group[i] = i, w[i] = d[i] = 0;
		int n = v, x, y;
		for (int i = 0; i < e; i++){
			cin >> x >> y;
			d[x]++, d[y]++;
			if (joint(x, y))n--;
		}
		for (int i = 1; i <= v; i++)
			if (!w[i] && find(i) == i)//獨立
				n--;
		int ans = e, odd[N] = {};
		ans += n>0 ? n - 1 : 0;
		for (int i = 1; i <= v; i++)
			if (d[i] & 1)
				odd[find(i)]++;

		for (int i = 1; i <= v; i++)
			if (odd[i] >= 4)//除了起點終點外 >=2 就需要補邊
				ans += (odd[i] - 2) / 2;//奇數度n點 除了起終  (n-2)  尚須(n-2)/2條邊走完剩下的點
		printf("Case %d: %d\n", T++, ans * t);
	}
}
