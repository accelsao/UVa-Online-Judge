#include<string>
#include<cstdio>
#include<iostream>
#include<queue>
#include<cmath>
#include<stack>
#include<cctype>
#include<cstring>
#include<sstream>
#include<set>
#include<map>
#include<algorithm>
#include<functional>
#include <regex>
using namespace std;


#define M 105
int d[M][M];
int pos[M][M];
string s;
bool match(char a, char b){
	return (a == '('&&b == ')') || (a == '['&&b == ']');
}
void dp(int n){
	for (int i = 0; i <= n; i++)
		//d[i + 1][i] = 0;//空字元 一開始全初始0
		d[i][i] = 1;//單字元
	//for (int len = 1; len < n;len++)
	for (int i = n-2; i>=0; i--)
		for (int j = i + 1; j < n;j++){
			d[i][j] = 1e9;
			if (match(s[i],s[j]))
				d[i][j] = d[i + 1][j - 1];
			for (int k = i; k <= j; k++)
				if (d[i][k] + d[k + 1][j] < d[i][j]){
					d[i][j] = d[i][k] + d[k + 1][j];
					pos[i][j] = k;
				}
		}
}
void print(int i, int j){
	if (i > j)return;
	if (i == j){
		if (s[i] == '(' || s[i] == ')')printf("()");
		else
			printf("[]");
		return;
	}
	if (pos[i][j] == -1)
		cout << s[i],print(i + 1, j - 1),cout << s[j];
	else
		print(i, pos[i][j]), print(pos[i][j] + 1, j);
}
int main(){
	int t;
	cin >> t;
	getchar();
	while (t--){
		getline(cin, s);
		getline(cin, s);
		memset(d, 0, sizeof(d));
		memset(pos, -1, sizeof(pos));
		dp(s.size());
		
		print(0, s.size()-1);
		puts("");
		if (t)puts("");
	}
}
