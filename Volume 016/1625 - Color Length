#include<string>
#include<cstdio>
#include<iostream>
#include<queue>
#include<cmath>
#include<stack>
#include<cctype>
#include<cstring>
#include<sstream>
#include<set>
#include<map>
#include<algorithm>
#include<functional>
#include <regex>
using namespace std;

#define M 5001
int p[M], q[M];
int sq[M], sp[M], ep[M], eq[M];
int n, m;
int dp[2][M],c[2][M];
int solve(){
	int t = 0;
	memset(dp, 0, sizeof(dp));
	memset(c, 0, sizeof(c));
	for (int i = 0; i <= n; i++){
		for (int j = 0; j <= m; j++){
			if (!i&&!j) continue;
			int v1 = 1e9, v2 = 1e9;
			if (i) v1 = dp[t ^ 1][j] + c[t ^ 1][j]; // 请把 t^1 视作 i-1，t 视作 i
			if (j) v2 = dp[t][j - 1] + c[t][j - 1];
			dp[t][j] = min(v1, v2);
			if (i){
				c[t][j] = c[t ^ 1][j];
				if (sp[p[i]] == i && sq[p[i]] > j) c[t][j]++;
				if (ep[p[i]] == i && eq[p[i]] <= j) c[t][j]--;
			}
			else if (j){
				c[t][j] = c[t][j - 1];
				if (sq[q[j]] == j && sp[q[j]] > i) c[t][j]++;
				if (eq[q[j]] == j && ep[q[j]] <= i) c[t][j]--;
			}
		}
		t ^= 1;
	}
	return dp[t ^ 1][m];
}
int main(){
	int t;
	string s;
	cin >> t;
	while (t--){
		cin >> s; n = s.size();
		for (int i = 0; i < s.size(); i++)
			p[i + 1] = s[i] - 'A';
		cin >> s; m = s.size();
		for (int i = 0; i < s.size(); i++)
			q[i + 1] = s[i] - 'A';

		for (int i = 0; i < 26; i++){
			sp[i] = sq[i] = 1e9;
			eq[i] = ep[i] = 0;
		}
		for (int i = 1; i <= n; i++){
			sp[p[i]] = min(sp[p[i]], i);
			ep[p[i]] = i;
		}
		for (int i = 1; i <= m; i++){
			sq[q[i]] = min(sq[q[i]], i);
			eq[q[i]] = i;
		}

		printf("%d\n", solve());
	}
}
