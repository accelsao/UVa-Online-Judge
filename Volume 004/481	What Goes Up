#include<iostream>
#include<algorithm>
#include<map>
#include<string>
#include<cstdio>
#include<queue>
#include<cmath>
#include<stack>
#include<sstream>
using namespace std;

int data[100000];
int length[100000];
int front[100000];
int Q[100000];

void output(int v)
{
	if (front[v])
		output(front[v]);
	printf("%d\n", data[v]);
}

int bs(int r, int v){
	int l = 1;
	while (l < r) {
		int mid = (l + r)/2;
		if (data[Q[mid]] < v)
			l = mid + 1;
		else r = mid;
	}
	return r;
}

int main(){
	int count = 1;
	while (cin >> data[count++]);
	int tail = 0;
	Q[++tail] = 1;
	for (int i = 2; i < count; ++i)
		if (data[Q[tail]] < data[i]) {
			Q[++tail] = i;
			front[i] = Q[tail - 1];
		}
		else {
			int id = bs(tail, data[i]);
			Q[id] = i;
			front[i] = Q[id - 1];
		}

		printf("%d\n-\n", tail);
		output(Q[tail]);
}
----------------------------------------------------------
#include<iostream>
#include<algorithm>
#include<map>
#include<string>
#include<cstdio>
#include<queue>
#include<cmath>
#include<stack>
#include<sstream>
using namespace std;

int data[100000];
int length[100000];
int front[100000];
int Q[100000];
void output(int v){
	if (front[v])
		output(front[v]);
	printf("%d\n", data[v]);
}

int bs(int r, int v){
	int l = 1;
	while (l <= r) {
		int mid = (l + r)/2;
		if (data[Q[mid]] < v)
			l = mid + 1;
		else r = mid-1;
	}
	return l;
}

int main(){
	int count = 1;
	while (cin >> data[count++]);
	int tail = 0;
	Q[++tail] = 1;
	count--;
	for (int i = 2; i < count; ++i)
		if (data[Q[tail]] < data[i]) {
			Q[++tail] = i;//原陣列的位置
			front[i] = Q[tail - 1];//前一個比他小的數
		}
		else {
			int id = bs(tail, data[i]);
			Q[id] = i;
			front[i] = Q[id - 1];
		}
		printf("%d\n-\n", tail);
		output(Q[tail]);
}
---------------------------------------------------------------------
#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<cstdlib>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<vector>
#include<unordered_map>
using namespace std;

int pos[1000005] = {};
int main(){
	int n;
	vector<int>v, ans;
	while (cin >> n)v.push_back(n);
	ans.push_back(v[0]); pos[0] = 1;
	for (int i = 0; i<v.size();i++)
		if (v[i] > ans.back()){
			ans.push_back(v[i]);
			pos[i] = ans.size();
		}
		else{
			auto it = lower_bound(ans.begin(), ans.end(), v[i]);
			pos[i] = it - ans.begin() + 1;
			*it = v[i];
		}
	
	printf("%d\n", ans.size());
	puts("-");
	vector<int>print;
	int j;
	for (int i = v.size()-1,j=ans.size(); i>=0&&j>0; i--)
		if (pos[i] == j){
			print.push_back(v[i]);
			j--;
		}
	for (int i = print.size() - 1; i >= 0; i--)
		cout << print[i] << endl;
}
