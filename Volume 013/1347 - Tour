#include<string>
#include<cstdio>
#include<iostream>
#include<queue>
#include<cmath>
#include<stack>
#include<cctype>
#include<cstring>
#include<sstream>
#include<set>
#include<map>
#include<algorithm>
#include<functional>
#include <regex>
using namespace std;

#define M 1010
double X[M], Y[M];
double dp[M][M];//1~max(i,j) 剩下要走的距離
double dis[M][M];//距離
double dist(int i, int j){
	return sqrt((X[j] - X[i])*(X[j] - X[i]) + (Y[j] - Y[i])*(Y[j] - Y[i]));
}
int main(){
	int n;
	while (cin >> n){
		memset(dp, 0, sizeof(dp));
		for (int i = 1; i <= n; i++)
			cin >> X[i] >> Y[i];
		for (int i = 2; i <= n; i++)
			for (int j = 1; j < i; j++)
				dis[i][j] = dis[j][i] = dist(i, j);

		for (int i = n - 1; i > 1; i--)
			for (int j = 1; j < i; j++){
				//d(n-1,j)=dis(n-1,n)+dis(j,n) 相當於剩下要走的距離只有 n-1~n+j~n ((初始
				if (i == n - 1)dp[i][j] = dis[j][n] + dis[i][n];
				//#1 i 走到i+1 dis(i,i+1) #2 j走到i+1 dis(i+1,j)  ((根據定義i>j
				else dp[i][j] = min(dp[i + 1][j] + dis[i][i + 1], dp[i + 1][i] + dis[i + 1][j]);
			}
		//所求 第一個人必走到第二點 + 剩下距離
		printf("%.2lf\n", dis[1][2] + dp[2][1]);
	}
}
