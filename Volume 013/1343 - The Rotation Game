#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<cstdlib>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<vector>
using namespace std;

/*
      00    01
      02    03
04 05 06 07 08 09 10
      11    12
13 14 15 16 17 18 19
      20    21
      22    23
*/
const int center[8] = { 6, 7, 8, 11, 12, 15, 16, 17 };
int p[24];
int N;
char ans[100];
int line[8][7] = {
	{ 0, 2, 6, 11, 15, 20, 22 }, // A
	{ 1, 3, 8, 12, 17, 21, 23 }, // B
	{ 10, 9, 8, 7, 6, 5, 4 }, // C
	{ 19, 18, 17, 16, 15, 14, 13 }, // D
	{ 23, 21, 17, 12, 8, 3, 1 }, // E
	{ 22, 20, 15, 11, 6, 2, 0 }, // F
	{ 13, 14, 15, 16, 17, 18, 19 }, // G
	{ 4, 5, 6, 7, 8, 9, 10 } // H
};
int rev[8] = { 5, 4, 7, 6, 1, 0, 3, 2 };
bool finish(){
	for (int i = 0; i < 8; i++)
		if (p[center[i]] != p[6])return 0;
	return 1;
}
int dif(int n){
	int ans = 0;
	for (int i = 0; i < 8; i++)
		if (p[center[i]] != n)ans++;
	return ans;
}
inline void move(int i){
	int tmp = p[line[i][0]];
	for (int j = 1; j < 7; j++)
		p[line[i][j-1]] = p[line[i][j]];
	p[line[i][6]] = tmp;
}
inline int h(){
	return min(min(dif(1), dif(2)), dif(3));
}
bool dfs(int d){
	if (finish()){
		ans[d] = '\0';
		printf("%s\n", ans);
		return 1;
	}
	if (d + h()>N)return 0;
	for (int i = 0; i < 8; i++){
		ans[d] = 'A' + i;
		move(i);
		if (dfs(d + 1))return 1;
		move(rev[i]);
	}
	return 0;
}
int main(){
	while (cin >> p[0]&&p[0]){
		for (int i = 1; i < 24; i++)
			cin >> p[i];
		if (finish())
			puts("No moves needed");
		else
			for (N = 1;; N++)
				if (dfs(0))break;
		printf("%d\n", p[6]);
	}
}
