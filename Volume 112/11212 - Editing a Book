#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<cstdlib>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<vector>
using namespace std;

int p[11];
int N;
int n;

bool judge(){
	for (int i = 1; i < n; i++)
		if (p[i - 1] > p[i])return 0;
	return 1;
}

int h(){//不正確的數字個數
	int num = 0;
	for (int i = 1; i < n; i++)
		if (p[i - 1] + 1 != p[i])num++;
	return num;
}
bool dfs(int d){
	if (3 * d + h() > 3 * N)return 0;
	if (judge())return 1;
	int tmp[15];
	int cut[15];
	for (int i = 0; i < n; i++)
		tmp[i] = p[i];
	for (int i = 0; i < n;i++)
		if (!i || p[i-1]+1 != p[i] ){//剪切起點
			for (int j = i; j < n; j++){
				while (j + 1 < n&&p[j] + 1 == p[j + 1])j++;//連續段 剪切終點
				
				for (int k = i; k <= j; k++)
					cut[k - i] = p[k];

				for (int s = j + 1; s < n; s++){//黏貼起點
					while (s + 1 < n&&p[s] + 1 == p[s + 1])s++;//不破壞連續段 從後面開始貼

					for (int d = j + 1; d <= s; d++)
						p[i + (d - (j + 1))] = tmp[d];
					for (int d = 0; d <= j - i; d++)
						p[i + d+(s - j)] = cut[d];
					//2步驟剪黏
					if (dfs(d + 1))return 1;
					for (int i = 0; i < n; i++)//修改失敗 恢復原狀
						p[i] = tmp[i];
				}
			}
		}
	return 0;//通通失敗
}
int solve(){
	if (judge())return 0;
	for (N = 1;; N++){
		if (dfs(0))return N;
	}
}
int main(){
	int t=1;
	while (cin >> n, n){
		for (int i = 0; i < n; i++)
			cin >> p[i];
		printf("Case %d: %d\n", t++, solve());
	}

}
