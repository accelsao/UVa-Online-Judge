#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<vector>
#include<functional>
#include<unordered_map>
using namespace std;

#define M 26
int p[M];
int w[M];
int find(int x){
	return x == p[x] ? x:p[x] = find(p[x]);
}
int main(){
	int t;
	cin >> t;
	string s;
	getchar();
	while (t--){
		for (int i = 0; i < 26; i++)
			p[i] = i, w[i] = 1;
		while (getline(cin, s), s[0] != '*'){
			int a = s[1]-'A', b = s[3]-'A';
			//if (a>b)swap(a, b);
			a = p[a]; b = p[b];
			for (int i = 0; i < 26; i++)
				if (p[i] == b)p[i] = a, w[a]++, w[b]--;
			
		}
		int check[26] = {};
		int tree = 0, acorn = 0;
		getline(cin, s);
		for (int i = 0; i < s.size(); i += 2){
			int x = p[s[i] - 'A'];
			if (!check[x]){
				check[x] = 1;
				if (w[x] == 1)acorn++;
				else tree++;
			}
		}
			printf("There are %d tree(s) and %d acorn(s).\n", tree, acorn);
	}
	
}

