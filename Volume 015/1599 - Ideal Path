#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<vector>
#include<functional>
#include<unordered_map>
using namespace std;


#include <cstdio>
#include <vector>
#include <cstring>
#include <queue>
#include <algorithm>
using namespace std;

const int maxn = 100000 + 10;
const int INF = 1000000000 + 10;

struct Edge{
	int to, c;
	Edge(int to=0, int c = 0) :to(to), c(c) {}
};

vector<Edge> G[maxn];
int n, d[maxn];
bool vis[maxn];
vector<int> ans;
void rev_bfs(){
	memset(vis, 0, sizeof(vis));
	queue<int> q;
	q.push(n);
	vis[n] = true;
	d[n] = 0;
	while (!q.empty()){
		int u = q.front(); q.pop();
		for (int i = 0; i < G[u].size(); ++i){
			int v = G[u][i].to;
			if (!vis[v]){
				vis[v] = 1;
				d[v] = d[u] + 1;
				q.push(v);
			}
		}
	}
}

void bfs(){
	memset(vis, 0, sizeof(vis));
	vis[1] = 1;
	ans.clear();
	vector<int> next;
	next.push_back(1);
	for (int i = 0; i < d[1]; ++i){
		int min_color = INF;
		for (int j = 0; j < next.size(); ++j){
			int u = next[j];
			for (int k = 0; k < G[u].size(); ++k){
				int v = G[u][k].to;
				if (d[u] == d[v] + 1)
					min_color = min(min_color, G[u][k].c);
			}
		}
		ans.push_back(min_color);
		vector<int> next2;
		for (int j = 0; j < next.size(); ++j){
			int u = next[j];
			for (int k = 0; k < G[u].size(); ++k){
				int v = G[u][k].to;
				if (!vis[v] && d[u] == d[v] + 1 && G[u][k].c == min_color){
					vis[v] = 1;
					next2.push_back(v);
				}
			}
		}
		next = next2;
	}
	printf("%d\n%d", d[1], ans[0]);
	for (int i = 1; i < ans.size(); ++i)
		printf(" %d", ans[i]);
	puts("");
}

int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	int m, u, v, c;
	while (cin >> n >> m)	{
		for (int i = 1; i <= n; ++i) G[i].clear();
		while (m--)	{
			cin >> u >> v >> c;
			if (u == v) continue;  
			//最短路中一定不含环
			G[u].push_back(Edge{ v, c });
			G[v].push_back(Edge{ u, c });
		}
		rev_bfs();
		bfs();
	}
}
