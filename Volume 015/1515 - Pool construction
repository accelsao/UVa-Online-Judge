#include<string>
#include<cstdio>
#include<iostream>
#include<queue>
#include<cmath>
#include<stack>
#include<cctype>
#include<cstring>
#include<sstream>
#include<set>
#include<map>
#include<algorithm>
#include<functional>
#include <regex>
using namespace std;


#define M 50*50+2
char m[51][51];
int s, t;
struct edge{
	int from, to, cap, flow;
};
struct dinic{
	int s, t;
	vector<int>g[M];
	vector<edge>v;
	bool vis[M];//BFS
	int d[M];//s~i的距離
	int cur[M];
	void init(int n){
		for (int i = 0; i <= n; i++)g[i].clear();
		v.clear();
	}
	void add(int from,int to,int cap){
		v.push_back(edge{ from, to, cap, 0 });
		v.push_back(edge{ to, from, 0, 0 });
		int m = v.size();
		g[from].push_back(m - 2);
		g[to].push_back(m - 1);
	}
	bool bfs(){
		memset(vis, 0, sizeof(vis));
		queue<int>q;
		q.push(s);
		vis[s] = 1;
		d[s] = 0;
		while (!q.empty()){
			int x = q.front(); q.pop();
			for (int i = 0; i < g[x].size(); i++){
				edge &e = v[g[x][i]];
				if (!vis[e.to] && e.cap > e.flow){
					vis[e.to] = 1;
					d[e.to] = d[x] + 1;
					q.push(e.to);
				}
			}
		}
		return vis[t];
	}
	//求出一條最短擴充路徑，並擴充流量。
	int dfs(int x,int a){
		if (x == t || !a)return a;
		int flow = 0, f;
		for (int &i = cur[x]; i < g[x].size(); i++){
			edge &e = v[g[x][i]];
			if (d[x] + 1 == d[e.to]){
				f = dfs(e.to, min(a, e.cap - e.flow));
				e.flow += f;
				v[g[x][i] ^ 1].flow -= f;
				flow += f; a -= f;
				if (!a)break;
			}
		}
		return flow;
	}
	int MF(int s,int t){
		this->s = s; this->t = t;
		int flow = 0;
		while (bfs()){
			memset(cur, 0, sizeof(cur));
			flow += dfs(s, 1e9);
		}
		return flow;
	}
	
}ss;
int main(){
	int w, h, d, f, b;
	int t;
	cin >> t;
	while (t--){
		cin >> w >> h >> d >> f >> b;
		int cost = 0;
		for (int i = 0; i < h; i++)
			for (int j = 0; j < w; j++)
				cin >> m[i][j];
		for (int i = 0; i < h; i++){
			if (m[i][0] == '.'){ m[i][0] = '#'; cost += f; }
			if (m[i][w-1] == '.'){ m[i][w-1] = '#'; cost += f; }
		}
		for (int i = 0; i < w; i++){
			if (m[0][i] == '.'){ m[0][i] = '#'; cost += f; }
			if (m[h-1][i] == '.'){ m[h-1][i] = '#'; cost += f; }
		}
		ss.init(h*w + 1);
		for (int i = 0; i < h; i++)
			for (int j = 0; j < w; j++){
				if (m[i][j] == '#'){
					int cap = d;
					if (!i || !j || i == h - 1 || j == w - 1)cap = 1e9;
					ss.add(w*h, i*w + j, cap);
				}
				else
					ss.add(i*w + j, w*h + 1, f);
				if (i > 0) ss.add(i*w + j, (i - 1)*w + j, b);
				if (i <h-1) ss.add(i*w + j, (i + 1)*w + j, b);
				if (j > 0) ss.add(i*w + j, i*w + j - 1, b);
				if (j <w-1) ss.add(i*w + j, i*w + j + 1, b);
			}
		//s h*w t h*w+1 
		printf("%d\n", cost + ss.MF(w*h, w*h + 1));
		
	}
}
