#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<vector>
#include<functional>
#include<unordered_map>
using namespace std;

int T, s, t, mark;
struct edge{
	int u, v, d, nxt;
};
vector<edge>g;
int head[20000], vis[20000], path[20000];
int e;
void add(int u, int v, int d){
	g.push_back(edge{ u, v, d, head[u] }), head[u] = e++;
	g.push_back(edge{ v, u, 0, head[v] }), head[v] = e++;
}
bool bfs(){
	mark++;
	int s = 0, d;
	queue<int>q;
	q.push(s);
	//for (int i = 0; i <= t; i++)vis[i] = 0;
	vis[s] = mark;
	while (!q.empty()){
		s = q.front(); q.pop();
		for (int i = head[s]; i != -1; i = g[i].nxt){
			d = g[i].v;
			if (vis[d] != mark&&g[i].d > 0){
				vis[d] = mark;
				path[d] = i;
				q.push(d);
				if (d == t)return 1;
			}
		}
	}
	return 0;
}
int mf(){
	int ans = 0;
	while (bfs()){
		int flow = 1e9;
		for (int i = t; i != s; i = g[path[i]].u)
			flow = min(flow, g[path[i]].d);
		for (int i = t; i != s; i = g[path[i]].u){
			g[path[i]].d -= flow;
			g[path[i] ^ 1].d += flow;
		}
		ans += flow;
	}
	return ans;
}
vector<string>v;
int main(){
	cin >> T; getchar(); getchar();
	string str;
	while (T--){
		g.clear(); v.clear();
		mark = 1;
		memset(head, -1, sizeof(head));
		memset(vis, 0, sizeof(vis));
		e = 0;
		map<string, int>party, club, man;
		map <string, int>::iterator it;
		map<int, string>R;
		while (getline(cin, str) && str.size()){
			v.push_back(str);
			stringstream ss(str);
			string a, b, c;
			ss >> a; ss >> b;
			man[a] = party[b] = 1;
			while (ss >> c)
				club[c] = 1;
		}
		s = 0;
		t = party.size() + man.size() + club.size() + 1;

		it = club.begin();
		for (int i = 1; i <= club.size(); i++){
			add(s, i, 1);
			it->second = i;
			R[it->second] = it->first;
			it++;
		}
		it = man.begin();
		for (int i = 1; i <= man.size(); i++){
			it->second = club.size() + i;
			R[it->second] = it->first;
			it++;
		}
		it = party.begin();
		for (int i = 1; i <= party.size(); i++){
			add(club.size() + man.size() + i, t, (club.size() + 1) / 2 - 1);//流量為俱樂部的不到一半
			it->second = club.size() + man.size() + i;
			R[it->second] = it->first;
			it++;
		}
		for (int i = 0; i < v.size(); i++){
			stringstream ss(v[i]);
			string a, b, c;
			ss >> a >> b;
			add(man[a], party[b], 1);
			while (ss >> c)
				add(club[c], man[a], 1);
		}

		int ans = mf();
		if (ans != club.size())
			puts("Impossible.");
		else{
			for (int i = 0; i <e; i++)
				if (g[i].u >= 1 && g[i].u <= club.size() && g[i].v >= club.size() + 1 && g[i].v <= club.size() + man.size())
					if (!g[i].d)
						cout << R[g[i].v] << ' ' << R[g[i].u] << endl;
		}
		if (T)puts("");
	}
}


