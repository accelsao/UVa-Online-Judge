#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<vector>
#include<functional>
#include<unordered_map>
#include<stack>
using namespace std;


int r, c;
char a[8][8], ans[8][8], grid[8][8];
bool solve;
struct state {
	bool color[8];
	bool up_left;
	int ncomps, comp[8];
	int color_ncomps[2];
	void normalize() {
		int ret[9];
		for (int i = 0; i < 9; i++)//comp[i]會到c(8) 要多開一格>
			ret[i] = -1;
		ncomps = color_ncomps[0] = color_ncomps[1] = 0;
		for (int i = 0; i < c; i++) {
			if (ret[comp[i]] == -1) {
				ret[comp[i]] = ncomps++;
				color_ncomps[color[i]]++;
			}
			comp[i] = ret[comp[i]];
		}
	}
	unsigned int encode() {
		//hash
		//unsigned int 2 ^ 32,測資最大 16 ^ 8 = (2 ^ 4) ^ 8 = 2 ^ 32
		unsigned int key = 0;
		for (int i = 0; i < c; i++)
			key = key * 16 + 8 * color[i] + comp[i];
		return key;
	}
	void merge(int a, int b) {
		if (a == b)return;
		for (int i = 0; i < c; i++)
			if (comp[i] == b)
				comp[i] = a;
	}
};
map<unsigned, int>dp[8][8][2];
const char ch[2] = { 'o','#' };
int DP(int row, int col, state & S, int force_color) {
	if (col == c) row++, col = 0;
	S.normalize();//最小表示
	if (row == r) {
		//2個以上連通分量 不合
		if (S.color_ncomps[0] > 1 || S.color_ncomps[1] > 1)
			return 0;
		if (!solve) {
			for (int i = 0; i < r; i++)
				for (int j = 0; j < c; j++)
					ans[i][j] = grid[i][j];
			solve = 1;
		}
		// 記錄其中一種解即可 因此紀錄第一種 之後不用在跑
		//	ans其实是记录了第一种可行解，因为这完全是一种搜索，深度优先搜索。
		return 1;
	}
	//底下是一个强力剪枝，书上的代码说，如果上面的格子和左侧的格子颜色不一样，那么统一设为0
	//这个可以减少状态，大大提高速率。这句话一定要放在判断是否计算过前，且只针对无限制情况有用。
	//但要注意条件必须是row和col>0时才能用

	//如果上格!=左格顏色 左上統一塗成一個顏色增加速度 因為不影響後面計算
	//但要注意条件必须是row和col>0时才能用
	//且針對填入顏色無限制使用 
	if (row > 0 && col > 0 && S.color[col] != S.color[col - 1])
		S.up_left = 0;
	unsigned int key;
	if (force_color < 0)//hash出 map值
		key = S.encode();
	if (force_color < 0 && dp[row][col][S.up_left].count(key))
		return dp[row][col][S.up_left][key];

	//状态的表示并不考虑该位置涂哪种颜色，而是在该位置两种都可以涂的情况下，一起考虑后的种数。
	//int &ret=dp[row][col][S.up_left]; 一般记忆化搜索的这种写法，这里不行，因为dp[row][col][S.up_left]
	//表示的是没有限制时的种数。后面要考虑限和不限制的。

	//真正的状态表示其实是dp[row][col][S.up_left][S中的color和comp数组];
	int ret = 0;
	for (int color = 0; color<2; color++) {
		//颜色0 1 表示黑 白，那么只有当原来的颜色(或者不涂)正好和现在填的相反 才是不行的
		if (force_color == (color ^ 1))  	continue;
		if (a[row][col] == ch[color ^ 1]) continue;
		//Scolor[col] 上 col-1 左 upleft 左上
		if (row>0 && col>0 && color == S.color[col] && color == S.color[col - 1] && color == S.up_left)  continue;//避免2X2
		grid[row][col] = ch[color];
		state T = S;
		/*
		一整行來計算 現在的塗色 會是row+1 的同col 才做判斷 且 color 為這時的上格
		然而 現在的塗色 的上格(S.color[col]) 會是下個狀態的左上
		左上  上  color 為現在塗色格 上個塗色個為 左
		左  color 左上為 "左"的上  上 為 color[col]所儲存色 也就是row-1的同col 塗色
		*/
		T.color[col] = color;
		T.up_left = S.color[col];
		/*
		两行，merge，归并。
		*/
		T.comp[col] = row>0 && S.color[col] == color ? S.comp[col] : S.ncomps;//容易掉row>0 同色用S的comp ,不然就ncomps 代表新的連通分量編號
		if (col>0 && S.color[col - 1] == color)//同色合併連通分量
			T.merge(T.comp[col - 1], T.comp[col]);
		if (row>0 && S.color[col] != color) {
			/**S.color[col]!=color这句话是不能掉的，因为仅凭
			find(T.comp,T.comp+ncols,S.comp[col])==T.comp+ncols这句话
			不足以判断将推出轮廓线的格子是否是一个独立的连通分量。
			color相等，一定不是。
			color不相等，find(T.comp,T.comp+ncols,S.comp[col])==T.comp+ncols，即即使T中找不到
			与S.col相同编号的格子，退出的格子也可能与其中之一连通，原因是退出的格子在T中的编号被改了。
			如果S.color[col]!=color，那么find(T.comp,T.comp+ncols,S.comp[col])==T.comp+ncols证明一定是独立的
			连通分量。
			**/

			if (find(T.comp, T.comp + c, S.comp[col]) == T.comp + c) {
				//如果找不到
				//S.col这个位置的连通分量在T中不复存在，连通分量++
				//此时后面的方格必须涂另外一种颜色
				if (row<r - 2 || S.color_ncomps[color ^ 1]>1)  continue;
				//還有兩行 保證出現2X2 因為只剩一個顏色塗
				//連通分量>1 超過限制數量

				//如果还有两行，无论后面怎样填一定不满足题意要求，即不出现2*2的同色方块。
				/**||后面的最难理解：如果已经执行到这里来了，证明新加入的一格和即将推出轮廓线的一格
				颜色不同，而且退出了一个连通分量，那么剩下的格子，必须颜色完全一样。
				这只需要S的轮廓线中的其它格子全部是新加入格子的颜色即可。
				S.color_ncomps[color^1]>1证明S中color^1的连通分量只有将要退出的那一处。即可满足
				**/

				ret += DP(row, col + 1, T, color);
				continue;
			}
		}
		ret += DP(row, col + 1, T, force_color);
	}
	if (force_color<0)
		dp[row][col][S.up_left][key] = ret;
	return ret;
}
int main() {
	//ios::sync_with_stdio(0), cin.tie(0);
	int t;
	cin >> t;
	while (t--) {
		cin >> r >> c;
		for (int i = 0; i < r; i++)
			for (int j = 0; j < c; j++) {
				cin >> a[i][j];
				dp[i][j][0].clear(), dp[i][j][1].clear();
			}
		solve = 0;
		state S;
		memset(&S, 0, sizeof S);
		printf("%d\n", DP(0, 0, S, -1));
		if (solve)
			for (int i = 0; i < r; i++) {
				for (int j = 0; j < c; j++)
					cout << ans[i][j];
				puts("");
			}
		puts("");
	}
}

