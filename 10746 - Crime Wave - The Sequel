#include <iostream>
#include <algorithm>
#include<vector>
#include<cstring>
#include<queue>
using namespace std;

#define eps 1e-6
struct edge {
	int u, v, cap, flow;
	double cost;
};
vector<edge>E;
vector<int>g[50];
void add(int u, int v, int cap, double cost) {
	E.push_back(edge{ u,v,cap,0,cost });
	E.push_back(edge{ v,u,0,0,-cost });
	int m = E.size();
	g[u].push_back(m - 2);
	g[v].push_back(m - 1);
}
int n, m;
int s, t;
void init() {
	for (int i = s; i <= t; i++)g[i].clear();
	E.clear();
}
double d[50];
int inq[50], pre[50],a[50];//inqueue pre residue
bool SPFA(int &flow, double &c) {
	for (int i = 0; i <= t; i++)inq[i] = pre[i] = a[i] = 0;
	for (int i = 0; i <= t; i++)d[i] = 1e9;
	d[s] =pre[s]= 0;
	a[s] = 1e9;	queue<int>q;
	q.push(s);
	while (!q.empty()) {
		int u = q.front(); q.pop();
		inq[u] = 0;
		for (int i = 0; i < g[u].size(); i++) {
			edge &e = E[g[u][i]];
			if (e.cap > e.flow&&d[e.v] > d[e.u] + e.cost+eps) {
				d[e.v] = d[e.u] + e.cost;
				//if (d[e.v] == double(6))
					//cout << e.cost;
				a[e.v] = min(a[e.u], e.cap - e.flow);
				pre[e.v] = g[u][i];
				if (!inq[e.v]) {
					inq[e.v] = 1;
					q.push(e.v);
				}
			}
		}
	}
	if (fabs(d[t] - 1e9) < eps)return 0;
	flow += a[t];
	c += (double)d[t] * (double)a[t];
	for (int i = t; i != s; i = E[pre[i]].u) {
		E[pre[i]].flow += a[t];
		E[pre[i] ^ 1].flow -= a[t];
	}
	return 1;
}

double MCMF() {
	double  c = 0;
	int flow = 0;
	while (SPFA(flow,c));
	return c;
}
int main() {
	while (cin >> n >> m, n) {
		s = 0, t = n + m + 1;
		init();
		double tt;
		for (int i = 1; i <= m; i++) 
			add(0, i, 1, 0);
		for (int i = 1; i <= n; i++) 
			for (int j = 1; j <= m; j++) {
				cin >> tt;
				add(j, i + m, 1, tt);
			}
		for (int j =1; j <= n; j++)
			add(j+m, t, 1, 0);	
		double p = MCMF();
		printf("%.2lf\n", p / n + 0.001);
	}
}
