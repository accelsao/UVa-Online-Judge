#include<iostream>
#include<sstream>
#include<algorithm>
#include<iomanip>
#include<cstdio>
#include<cstdlib>
#include<cctype>
#include<map>
#include<vector>
#include<cmath>
#include<queue>
#include<cstring>
#include<set>
#include<functional>
#include<list>
#include<stack>
#include<cstring>
#include<utility>
#include <climits>
#include<unordered_map>
using namespace std;
#define printf printf_s
#define sprintf sprintf_s
#define sscanf sscanf_s
#define scanf scanf_s


#include <iostream>
#include <vector>
#include <cstdlib> //atoi
#include <cstring> //strtok
#include <iomanip> //setw ,setfill
using namespace std;
#define BNum B.Num
#define Bdigit B.digit
struct BigInteger
{
	bool sign;//1(-),0(+)
	int Num[1001];
	int digit;
	BigInteger(string num = "");
	BigInteger operator+(BigInteger &B);
	BigInteger operator-(BigInteger &B);
	BigInteger operator*(BigInteger &B);
	BigInteger operator^(BigInteger &B);
	bool operator<(BigInteger &B);
	bool IsZero();
	void operator--(int);
	void operator*=(BigInteger &B);
	void CountDigit();
	friend ostream& operator<<(ostream& out, BigInteger &B);
};
int main()
{
	string expression, tmp;
	while (cin >> expression)
	{
		copy(expression.begin(), expression.end(), back_inserter(tmp));
		vector<BigInteger> num;
		vector<string> op;
		char *pch = strtok((char*)expression.c_str(), "+-*");
		while (pch)
		{
			num.push_back(BigInteger(pch));
			pch = strtok(NULL, "+-*");
		}
		expression = tmp;

		pch = strtok((char*)expression.c_str(), "0123456789");
		while (pch)
		{
			op.push_back(pch);
			pch = strtok(NULL, "0123456789");
		}
		for (int i = op.size() - 1; i >= 0; i--)
		{
			if (op[i] == "**")
			{
				num[i] = num[i] ^ num[i + 1];
				op.erase(op.begin() + i);
				num.erase(num.begin() + i + 1);
			}
		}
		for (int i = 0; i<op.size(); i++)
		{
			if (op[i] == "*")
			{
				num[i] = num[i] * num[i + 1];
				num.erase(num.begin() + i + 1);
				op.erase(op.begin() + i);
				i--;
			}
		}
		for (int i = 0; i<op.size(); i++)
		{
			if (op[i] == "+") num[i] = num[i] + num[i + 1];
			else if (op[i] == "-")num[i] = num[i] - num[i + 1];
			num.erase(num.begin() + i + 1);
			op.erase(op.begin() + i);
			i--;
		}
		cout << num[0] << endl;
		tmp.clear();
	}
	return 0;
}
BigInteger::BigInteger(string str) :sign(0), digit(0), Num{ 0 }
{
	while (str.size()>4)
	{
		string tmp = str.substr(str.size() - 4);
		Num[digit++] = atoi(tmp.c_str());
		str.erase(str.size() - 4, 4);
	}
	if (str.size())
	{
		Num[digit++] = atoi(str.c_str());
	}
}
void BigInteger::CountDigit()
{
	for (int i = 1000; i >= 0; i--)
	{
		if (Num[i] != 0)
		{
			digit = i + 1;
			return;
		}
	}
}

void BigInteger::operator--(int)
{
	if (digit <= 0) return;
	Num[digit - 1]--;
	for (int i = 0; i<digit - 1; i++)
	{
		Num[i] += 9999;
	}
	CountDigit();
	for (int i = 1; i<digit; i++)
	{
		Num[i] += Num[i - 1] / 10000;
		Num[i - 1] %= 10000;
	}
	CountDigit();
}
void BigInteger::operator*=(BigInteger &B)
{
	*this = (*this)*B;
}
bool BigInteger::IsZero()
{
	return digit == 1&&Num[0] == 0;
}
bool BigInteger::operator<(BigInteger &B)
{
	if (sign == B.sign)
	{
		if (sign == 0)//都是正數
		{
			if (digit<Bdigit) return true;
			else if (digit == Bdigit)
			{
				for (int i = digit - 1; i >= 0; i--)
				{
					if (Num[i]<BNum[i]) return true;
					else if (Num[i] == BNum[i]) continue;
					else return false;
				}
			}
			else return false;
		}
		else//都是負數
		{
			if (digit<Bdigit) return false;
			else if (digit == Bdigit)
			{
				for (int i = digit - 1; i >= 0; i--)
				{
					if (Num[i]<BNum[i]) return false;
					else if (Num[i] == BNum[i]) continue;
					else return true;
				}
			}
			else return true;
		}
	}
	else if (sign == 1 && B.sign == 0)//負數<正數
	{
		return true;
	}
	else//正數<負數
	{
		return false;
	}
}
BigInteger BigInteger::operator+(BigInteger &B)
{
	BigInteger result;
	if (sign == B.sign)
	{
		for (int i = 0; i<digit|| i<Bdigit; i++)
		{
			result.Num[i] += Num[i] + BNum[i];
			result.Num[i + 1] += result.Num[i] / 10000;
			result.Num[i] %= 10000;
		}
	}
	else//-3+2
	{
		this->sign = 0;
		result = B - (*this);
	}
	result.CountDigit();
	return result;
}
BigInteger BigInteger::operator-(BigInteger &B)
{
	BigInteger result;
	if (*this<B)
	{
		result.sign = 1;//負數
		if (Bdigit>1)
		{
			BNum[Bdigit - 1]--;
			for (int i = Bdigit - 2; i>0; i--)
			{
				BNum[i] += 9999;
			}
			BNum[0] += 10000;
			for (int i = 0; i<Bdigit; i++)
			{
				if (sign == 0) result.Num[i] = BNum[i] - Num[i];
				else result.Num[i] = BNum[i] + Num[i];
			}
		}
		else
		{
			if (sign == 0)result.Num[0] = BNum[0] - Num[0];
			else result.Num[0] = BNum[0] + Num[0];
		}
	}
	else
	{
		if (digit>1)
		{
			Num[digit - 1]--;
			for (int i = digit - 2; i>0; i--)
			{
				Num[i] += 9999;
			}
			Num[0] += 10000;
			for (int i = 0; i<digit; i++)
			{
				result.Num[i] = Num[i] - BNum[i];
			}
		}
		else
		{
			result.Num[0] = Num[0] - BNum[0];
		}
	}
	for (int i = 1; i<Bdigit || i<digit; i++)
	{
		result.Num[i] += result.Num[i - 1] / 10000;
		result.Num[i - 1] %= 10000;
	}
	result.CountDigit();
	return result;
}
BigInteger BigInteger::operator*(BigInteger &B)
{
	BigInteger result;
	if (sign) result.sign = !result.sign;
	if (B.sign) result.sign = !result.sign;
	for (int i = 0; i<digit; i++)
	{
		for (int j = 0; j<Bdigit; j++)
		{
			result.Num[i + j] += Num[i] * BNum[j];
		}
	}
	for (int i = 1; i<digit + Bdigit; i++)
	{
		result.Num[i] += result.Num[i - 1] / 10000;
		result.Num[i - 1] %= 10000;
	}
	result.CountDigit();
	return result;
}
BigInteger BigInteger::operator^(BigInteger &B)
{
	BigInteger result("1");
	while (!B.IsZero())
	{
		result *= (*this);
		B--;

	}
	return result;
}

ostream& operator<<(ostream& out, BigInteger &B)
{
	if (Bdigit == 0) out << 0;
	else
	{
		if (B.sign) cout << "-";
		if (Bdigit) cout << BNum[Bdigit - 1];
		for (int i = Bdigit - 2; i >= 0; i--)
		{
			out << setw(4) << setfill('0') << BNum[i];
		}
	}
	return out;
}
