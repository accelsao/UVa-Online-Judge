#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<vector>
#include<functional>
#include<unordered_map>
using namespace std;

const int maxn = 50000 + 10;
const int INF = 0x3f3f3f3f;
const int logmaxn = 20;

int n, m;

#define scanf scanf_s
struct Edge
{
	int u, v, d;
	bool operator < (const Edge& rhs) const
	{
		return d < rhs.d;
	}
};

Edge e[maxn];

int pa[maxn];

int find(int x){
	return x == pa[x] ? x : pa[x] = find(pa[x]);
}
vector<int> G[maxn], C[maxn];


struct LCA{
	int n;
	int fa[maxn];
	int cost[maxn];
	int L[maxn];
	int anc[maxn][logmaxn];
	int maxcost[maxn][logmaxn];
	void preprocess(){
		for (int i = 0; i<n; i++){
			anc[i][0] = fa[i];
			maxcost[i][0] = cost[i];
			for (int j = 1; (1 << j)<n; j++)
				anc[i][j] = -1;
		}

		for (int j = 1; (1 << j)<n; j++)
			for (int i = 0; i<n; i++)
				if (anc[i][j - 1] != -1){
					int a = anc[i][j - 1];
					anc[i][j] = anc[a][j - 1];
					maxcost[i][j] = max(maxcost[i][j - 1], maxcost[a][j - 1]);
				}
	}
	int query(int p, int q){
		int log = 1;
		if (L[p]<L[q]) swap(p, q);
		while ((1 << (log + 1)) <= L[p])log++;
		//for (log = 1; (1 << log) <= L[p]; log++);
		//log--;

		int ans = -INF;
		for (int i = log; i >= 0; i--){
			if (L[p] - (1 << i) >= L[q]){
				ans = max(ans, maxcost[p][i]);
				p = anc[p][i];
			}
		}
		if (p == q) return ans;        //lca 是 p

		for (int i = log; i >= 0; i--)
		{
			if (anc[p][i] != -1 && anc[p][i] != anc[q][i])
			{
				ans = max(ans, maxcost[p][i]);
				p = anc[p][i];
				ans = max(ans, maxcost[q][i]);
				q = anc[q][i];
			}
		}

		ans = max(ans, cost[p]);
		ans = max(ans, cost[q]);

		return ans;
		//LCA 是 fa[p] = fa[q];
	}

};

LCA solver;

void dfs(int u, int fa, int level){
	solver.L[u] = level;
	for (int i = 0; i<G[u].size(); i++){
		int v = G[u][i];
		if (G[u][i] != fa){
			solver.fa[v] = u;
			solver.cost[v] = C[u][i];
			dfs(G[u][i], u, level + 1);
		}
	}
}

int main(){
	int t = 0;
	while (scanf("%d%d", &n, &m) == 2){
		if (t++)puts("");
		for (int i = 0; i<m; i++){
			int u, v, d;
			scanf("%d%d%d", &u, &v, &d);
			e[i] = Edge{ u - 1, v - 1, d };
		}
		sort(e, e + m);
		for (int i = 0; i < n; i++){
			pa[i] = i;
			G[i].clear();
			C[i].clear();
		}

		for (int i = 0; i < m; i++){
			int v = e[i].v;
			int u = e[i].u;
			int fx = find(e[i].u);
			int fy = find(e[i].v);
			if (fx != fy){
				pa[fx] = fy;
				G[u].push_back(v);
				C[u].push_back(e[i].d);
				G[v].push_back(u);
				C[v].push_back(e[i].d);
			}
		}
		solver.n = n;
		dfs(0, -1, 0);
		solver.preprocess();
		int Q;
		scanf("%d", &Q);
		while (Q--){
			int u, v;
			scanf("%d%d", &u, &v);
			u--;
			v--;
			printf("%d\n", solver.query(u, v));
		}
	}
}
-------------------------------------------------------------------------------
#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<vector>
#include<functional>
#include<unordered_map>
using namespace std;


#define scanf scanf_s
struct E {
	int x, y, v;
	E(int a = 0, int b = 0, int c = 0) :
		x(a), y(b), v(c) {}
	bool operator<(const E &a) const {
		return v < a.v;
	}
};
struct Edge {
	int to, v;
	Edge(int a = 0, int b = 0) :
		to(a), v(b)  {}
};
E D[100005];
vector<Edge> g[50005];
int parent[50005];
int getParent(int x) {
	return parent[x] == x ? x : parent[x] = getParent(parent[x]);
}
int joint(int x, int y) {
	x = getParent(x), y = getParent(y);
	if (x == y)    return 0;
	parent[x] = y;
	return 1;
}
void MST(int n, int m) {//Kruskal algorithm
	sort(D, D + m);
	int i;
	for (i = 1; i <= n; i++) {
		g[i].clear();
		parent[i] = i;
	}
	for (i = 0; i < m; i++) {
		if (joint(D[i].x, D[i].y)) {
			g[D[i].x].push_back(Edge(D[i].y, D[i].v));
			g[D[i].y].push_back(Edge(D[i].x, D[i].v));
		}
	}
}
int depth[50005], visited[50005];
int dp[50005][18], dpRoot[50005][18];// Doubling algorithm
void dfs(int nd, int p, int w) {
	visited[nd] = 1;
	depth[nd] = depth[p] + 1;
	dpRoot[nd][0] = p;
	dp[nd][0] = w;
	int i, j;
	Edge e;
	for (i = 1, j = 2; j <= depth[nd]; i++, j <<= 1) {
		dp[nd][i] = max(dp[nd][i - 1], dp[dpRoot[nd][i - 1]][i - 1]);
		dpRoot[nd][i] = dpRoot[dpRoot[nd][i - 1]][i - 1];
	}
	for (i = g[nd].size() - 1; i >= 0; i--) {
		e = g[nd][i];
		if (e.to == p)    continue;
		dfs(e.to, nd, e.v);
	}
}
int query(int x, int y) {
	int ret = -0xfffffff;
	int i, j;
	if (depth[x] < depth[y])
		swap(x, y);
	if (depth[x] > depth[y]) {// adjust same level.
		int diff = depth[x] - depth[y];
		for (i = 0; diff; i++) {
			if ((diff >> i) & 1) {
				ret = max(ret, dp[x][i]);
				x = dpRoot[x][i];
				diff ^= 1 << i;
			}
		}
	}
	if (x != y) {
		for (i = 16; i >= 0; i--) {
			if (dpRoot[x][i] != dpRoot[y][i]) {
				ret = max(ret, dp[x][i]);
				ret = max(ret, dp[y][i]);
				x = dpRoot[x][i];
				y = dpRoot[y][i];
			}
		}
		ret = max(ret, dp[x][0]);
		ret = max(ret, dp[y][0]);
	}
	return ret;
}
int main() {
	int n, m, q;
	int i, j, x, y;
	int cases = 0;
	while (scanf("%d %d", &n, &m) == 2) {
		if (cases++)
			puts("");
		for (i = 0; i < m; i++)
			scanf("%d %d %d", &D[i].x, &D[i].y, &D[i].v);
		MST(n, m);
		memset(visited, 0, sizeof(visited));
		memset(dp, 0, sizeof(dp));
		memset(dpRoot, 0, sizeof(dpRoot));
		depth[0] = 0;//init
		for (i = 1; i <= n; i++) {
			if (visited[i] == 0) {
				dfs(i, 0, 0);
			}
		}
		scanf("%d", &q);
		while (q--) {
			scanf("%d %d", &x, &y);
			printf("%d\n", query(x, y));
		}
	}
	return 0;
}
