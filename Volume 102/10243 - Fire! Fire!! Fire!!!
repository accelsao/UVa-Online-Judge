#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<vector>
#include<functional>
#include<unordered_map>
using namespace std;

#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<vector>
#include<functional>
#include<unordered_map>
using namespace std;

vector<int> g[1001];
int v[1001];
int dp[1001][2];//0不放 1放
void dfs(int x) {
	v[x] = 1;
	dp[x][0] = 0, dp[x][1] = 1;
	for (int i = 0; i < g[x].size(); i++) {
		int t = g[x][i];
		if (!v[t]) {
			dfs(t);
			dp[x][0] += dp[t][1];//[某點][不放] = [子樹][放]
			dp[x][1] += min(dp[t][0], dp[t][1]);//[某點][放]=[子樹][min(放,不放)]
		}
	}
	return;
}
int main() {
	int n, x, y;
	while (cin >> n, n) {
		for (int i = 1; i <= n; i++)
			g[i].clear(), v[i] = dp[i][0] = dp[i][1] = 0;
		for (int i = 1; i <= n; i++) {
			cin >> x;
			while (x--)
				cin >> y, g[i].push_back(y);
		}
		dfs(1);
		//n=1時 特殊處理
		printf("%d\n", n==1?1:min(dp[1][0], dp[1][1]));
	}
}
