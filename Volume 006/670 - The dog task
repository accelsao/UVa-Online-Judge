#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<vector>
#include<functional>
#include<unordered_map>
using namespace std;

int t, n, m;
int x[105], y[105], X[105], Y[105];
int a[205], b[205], v[205];
vector<int> g[205];
int dfs(int x) {
	for (int i = 0; i < g[x].size(); i++) {
		int y = g[x][i];
		if (!v[y]) {
			v[y] = 1;
			if (!b[y] || dfs(b[y])) {
				a[x] = y, b[y] = x;
				return 1;
			}
		}
	}
	return 0;
}
int main() {
	cin >> t;
	while (t--) {
		cin >> n >> m;
		for (int i = 1; i <= n; i++)
			cin >> x[i] >> y[i],g[i].clear();
		for (int i = 1; i <= m; i++)
			cin >> X[i] >> Y[i];
		memset(a, 0, sizeof(a));
		memset(b, 0, sizeof(b));
		for (int i = 1; i < n; i++) {
			double len = (x[i] - x[i + 1])*(x[i] - x[i + 1]) + (y[i] - y[i + 1])*(y[i] - y[i + 1]);
			len = 2 * sqrt(len);
			for (int j = 1; j <= m; j++) {
				double l1 = (x[i] - X[j])*(x[i] - X[j]) 
					+ (y[i] - Y[j])*(y[i] - Y[j]);
				double l2 = (x[i+1] - X[j])*(x[i+1] - X[j]) 
					+ (y[i+1] - Y[j])*(y[i+1] - Y[j]);
				l1 = sqrt(l1);
				l2 = sqrt(l2);
				if (l1 + l2 <= len)//點1 到 配對點 + 點2 到 配對點 <= 點1到點2 *2(狗的速度是2倍)
					g[i].push_back(j);
			}
		}
		int matched = 0;
		for (int i = 1; i <= n; i++) {
			if (!a[i]) {
				memset(v, 0, sizeof(v));
				if (dfs(i))matched++;
			}
		}
		printf("%d\n", matched + n);
		for (int i = 1; i <= n; i++) {
			if (i != 1)putchar(' ');
			printf("%d %d", x[i], y[i]);
			if (a[i])
				printf(" %d %d", X[a[i]], Y[a[i]]);
		}
		puts("");
		if (t)puts("");
	}
}
