#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<vector>
#include<unordered_map>
using namespace std;

vector<int>g[1001];
int t = 1;
int xmn[1001], xmx[1001], ymn[1001], ymx[1001];
int a[1001], b[1001],vis[1001]; 
bool dfs(int x, int u, int v) {
	for (int i = 0; i < g[x].size(); i++) {
		int y = g[x][i];
		if (vis[y] || (x == u&&y == v))continue;//禁止使用u,v邊
		vis[y] = 1;
		if (b[y] == -1 || dfs(b[y], u, v)) {
			b[y] = x, a[x] = y;
			return 1;
		}
	}
	return 0;
}
int bipartite(int n, int u, int v) {
	for (int i = 0; i < n; i++)
		a[i] = b[i] = -1;
	int c = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++)vis[j] = 0;
		if (dfs(i, u, v))c++;
	}
	return c++;
}
int main() {
	int n;
	while (cin >> n, n) {
		for (int i = 0; i < n; i++)
			cin >> xmn[i] >> xmx[i] >> ymn[i] >> ymx[i],g[i].clear();
		int x, y;
		for (int i = 0; i < n; i++) {
			cin >> x >> y;
			for (int j = 0; j < n; j++)
				if (xmn[j] <= x&&xmx[j] >= x&&ymn[j] <= y&&ymx[j] >= y)
					g[j].push_back(i);
		}
		int ans = bipartite(n, -1, -1);
		int s[1000];
		for (int i = 0; i < n; i++)
			s[i] = a[i];
		printf("Heap %d\n", t++);
		bool ok = 0;
		for(int i=0;i<n;i++)
			if (bipartite(n, i, s[i]) < ans) {//檢查唯一性
				if (ok)putchar(' ');
				printf("(%c,%d)", (i + 'A'), s[i] + 1);
				ok = 1;
			}
		if (!ok)printf("none");
		puts("\n");
	}
}
