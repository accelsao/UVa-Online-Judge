#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<vector>
#include<functional>
#include<unordered_map>
using namespace std;


int n, m, s, v;
struct point {
	double x, y;
}a[101], b[101];
int mx[101], my[101];
int g[101][101];
int vis[101];
double d(int i, int j) {
	return sqrt((a[i].x - b[j].x)*(a[i].x - b[j].x) + (a[i].y - b[j].y)*(a[i].y - b[j].y));
}
int prem() {
	int c = 0;
	for(int i=1;i<=n;i++)
		if(!mx[i])
			for(int j=1;j<=m;j++)
				if (!my[j]) 
					if (g[i][j]) {
						mx[i] = j; my[j] = i;
						c++; break;
					}
	return c++;
}
bool dfs(int x) {
	for (int y = 1; y <= m; y++) {
		if (!g[x][y] || vis[y]) continue;
		vis[y] = 1;	
		if (!my[y] || dfs(my[y])) {
			mx[x] = y; my[y] = x;
			return 1;
		}
	}
	return 0;
}
int main() {
	while (cin >> n >> m >> s >> v) {
		for (int i = 1; i <= n; i++)
			cin >> a[i].x >> a[i].y;
		for (int i = 1; i <= m; i++)
			cin >> b[i].x >> b[i].y;
		memset(mx, 0, sizeof(mx));
		memset(my, 0, sizeof(my));
		memset(g, 0, sizeof(g));
		for (int i = 1; i <= n; i++)
			for (int j = 1; j <= m; j++)
				if (d(i, j) <= s*v)
					g[i][j] = 1;
		int c = prem();	
		for(int i=1;i<=n;i++)
			if (!mx[i]) {
				memset(vis, 0, sizeof(vis));
				if (dfs(i))c++;
			}
		printf("%d\n", n - c);
	}
}
