#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<vector>
#include<functional>
#include<unordered_map>
using namespace std;

int n, s;
struct edge{
	int fr, to,d;
};
vector<edge> w;
int d[101];
int t=1;
void bell(int s){
	for (int i = 1; i <= n; i++)d[i] = 1e9;
	d[s] = 0;
	for (int i = 0; i < n - 1; i++)
		for (int j = 0; j < w.size(); j++)
			if (d[w[j].fr] + w[j].d < d[w[j].to])
				d[w[j].to] = d[w[j].fr] + w[j].d;
	int ans = 1e9,pos=-1;
	for (int i = 1; i <= n; i++)
		if (d[i] < ans)
			ans = d[i], pos = i;
	printf("Case %d: The longest path from %d has length %d, finishing at %d.\n\n", t++, s, -ans, pos);
}
int main(){
	
	while (cin>>n,n){
		cin >> s;
		w.clear();
		int a, b;
		while (cin >> a >> b, a)
			w.push_back(edge{ a, b, -1 });
		bell(s);
	}
}
